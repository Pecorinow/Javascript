// ! Bases des int√©ractions avec le DOM :
// ! ------------------------

// Document Object Model = gigantesque objets o√π on trouve toutes les infos relatives √† la page.

//* window est un objet qui repr√©sente toute notre fen√™tre de navigateur qui peurt servir √† r√©cup des infos comme :
// - sur quel navigateur est l'utilisateur
// - la liste des extensions install√©es par l'utilisateur -> ex. popups anti adblock, lecteurs d'√©cran, 
// - localisation de l'utilisateur -> ex. lui proposer des restos...
// - langue du navigateur de l'utilisateur
// - sa pr√©f√©rence de th√®me (th√®me sombre, clair)
// - l'url actuelle...

//* document est un bojet qui repr√©sente toute la page html
//? C'est lui qu nous int√©resse pour le moment
// = gros objet qui repr√©sente toute notre page, y compris son titre.
// Comme une page ne poss√®de qu'un seul title, on peut par ex le modifier depui sl'objet document :
document.title = 'La bonne page';
// Le body √©tant aussi unique, on pet y acc√©der directement depuis le doc, ainsi qu'√ß√† ce qu'il contient :
// document.body.classList

//! Par contre, si on veut r√©cup des √©l√©ments pr√©cis, pas garanti qu'il n'y en ait qu'un, ni qu'il existe :
// document.div -> impossible car quelle div ?
// -> M√©thodes ou fonctions n√©cessaires pour r√©cup des √©l√©ments dans la page !


//? Plusieurs m√©thodes de r√©cup :
//?----------------------------
// Celui qu'on utilisera le plus prochainement sera //!via l'id de l'√©l√©ment √† r√©cup :
// Attention, sur deux id similaires dans le html (normalement pas permis mais on sait jamais), c'est le premier qui appara√Æt qui sera repris, l'autre osef
// La m√©thode document.getElementById('nom id'); r√©cup√®re l'√©l√©ment qui correspond √† l'id
// On devra alors le stocker dans une variable pour l'utiliser ensuite :

// On pr√©f√®re //*stocker la valeur dans une const, car let risque d'√©craser la valeur actuelle :
const DIV_EX_1 = document.getElementById('prout');  
console.log(DIV_EX_1); // Ici on a cr√©√© l'objet DIV_EX_1, qui repr√©sente la balise HTML dont l'id est 'prout'.

// const DIV_EX_1 = document.getElementById('proute');  // si faute dans l'√©criture de l'id, la valeur renvoy√©e sera null car l'√©l√©ment n'aura pas √©t√© trouv√©.

//! Autres m√©thodes : r√©cup√©rer des listes d'√©l√©ments :
//*Via une classe :
const TOUS_LES_ELEMENTS_BLEUS = document.querySelectorAll('blue');
// = sr√©cup√©rer tous les √©l√©ments qui ont la classe 'blue'

//* Via nom de balise :
// const TOUS_LES_LIENS = document.querySelectorAll(a);
// = r√©cup√©rer via le nom de la balise

//! Modifier le contenu (textuel) d'un √©l√©ment HTML :
// Uniquement sur les balises en paires, donc div, nav, listes, mais pas images p.ex.
// * innerText ou textContent:
DIV_EX_1.innerText = '1e modif';
DIV_EX_1.textContent ='2e modif';

// * innerHTML :
DIV_EX_1.innerHTML = '3e modif';

//* Quelle diff entre innerText et textContent ?
// ! Compl√©ter avec le cours !!


//! Ajouter un √©v√®nement
//!---------------------
const DIV_PLANTE = document.getElementById('plante');
const BTN_ARROSER = document.getElementById('arroser');
// Pour aj√ßouter une gestion d'√©v√®nements sur l'√©l√©ment html, on lui ajoute un "√©couter d'√©l√©ment", qui va 1.gu√©ter l'arriv√©e d'un √©v√®nement 2.d√©clencher 
// Cett em√©thode addEbventListener demande 2 infos :
//1. le type d'vent (string)
//2. le code √† ex√©cuter au moment de cet event (fonction), ici une fonction anonyme :
// () => {} = fonction anonyme :
BTN_ARROSER.addEventListener('click', () => {
    DIV_PLANTE.textContent = 'üå≥';
});
    // = dans les {} on ajoute tout le code qu'on veut ex√©cuter lors du click (ici click = √©v√®nement)
    // Au click, un arbre appara√Ætra √† la place de la plante dans la div qui porte l'id plante



//! Modifier les classes
const DIV_JOUR = document.getElementById('jour');
const BTN_INVERSER = document.getElementById('inverser');
// = Comme d'hab, ici on r√©cup et conserve les √©l√©ments 'jour' et 'inverser', puis...
BTN_INVERSER.addEventListener('click', () => {
    DIV_JOUR.classList.toggle('jour');
    DIV_JOUR.classList.toggle('nuit');
});
    // * classList donne la liste des classes de l'√©l√©ment :
    // classlist.add('nomClass') ajoute la classe
    // classlist.remove('nomClass') retire la classe
    // classlist.contains('nomClass') renvoie un bool√©en pour savoir si la classe est pr√©sente ou non
    // classlist.toggle('nomClass') supprime la classe si elle est pr√©sente, sinon l'ajoute = peut √©changer une classe avec une autre si on met 1 toggle pour chaque classe !

//! Modifier le style d'une balise (seulement en cas de besoin!)
const BTN_COMBIEN = document.getElementById('combien');
const DIV_JAUGE = document.getElementById('jauge');

BTN_COMBIEN.addEventListener('click', () => {
   let note = prompt('Tu te mets combien en Javascript sur 100 ?');
   
   //on modifie la taille de la div jauge pour qu'elle soit √©gale √† la note de l'utilisateur
   DIV_JAUGE.style.width = note + '%';
});



//! Modifier les attributs
const P_VOUS = document.getElementById('vous');
const IMG_VOUS = document.getElementById('vous-img');
const BTN_FINIR = document.getElementById('finir');

BTN_FINIR.addEventListener('click', () => {
    P_VOUS.textContent = 'Vous √† la fin de la journ√©e :';
    IMG_VOUS.src = 'https://m.media-amazon.com/images/I/513eV9QFlAL._UF350,350_QL50_.jpg';
    IMG_VOUS.alt = 'crying cat';
});

//! Consulter / modifier la valeur d'un champs :
const INPUT_TECHNO = document.getElementById('techno');
const BTN_VALIDER = document.getElementById('valider');
const P_RESULTAT = document.getElementById('resultat');
// Cette partie sert √† conserver les valeurs des id (= techno, valider...) dans des variables ( =INPUT_TECHNO...)

BTN_VALIDER.addEventListener('click', () => {
    let techno=INPUT_TECHNO.value; 
    P_RESULTAT.textContent = `Aaaah oui ${techno} c'est la pire, courage, tu vas juste faire √ßa toute ta vie üôÉ`; // /!\ Les lignes "let id=INPUT" servent √† r√©cup√©rer  les valeurs d'id conserv√©es dans les variables INPUT, qui vont √™tre renvoy√©es dans la partie resultat. En gros, √ßa dit "Quand l'id techno sera appel√©, renvoyer la valeur conserv√©e dans la variable "INPUT_TECHNO".

    INPUT_TECHNO.value = ''; //'' chaine vide = r√©initialiser et effacer les donn√©es pr√©sentes dans les inputs (si on ne le fait pas les valeurs entr√©es restent visibles dans les inputs m√™me apr√®s obtention du r√©sultat)
});

// Exo perso:
const P_MOI = document.getElementById('moi');
const IMG_MOI = document.getElementById('moi-img');
const BTN_APRES = document.getElementById('apres');

BTN_APRES.addEventListener('click', () => {
    P_MOI.textContent = 'Moi 0.02 secondes apr√®s avoir commenc√© JavaScript (aidez-moi)';
    IMG_MOI.src = 'https://i.pinimg.com/736x/37/44/41/374441df50f7ddc13b6b0affec3d9f5b.jpg';
    IMG_MOI.alt = 'Carlo Tentacule bizarre';
})




