//!--------------
//! Les tableaux :
//!--------------

//! ATTENTION : En JS , pas de diff√©rence entre tableaux et listes. Les tableaux en js n'ont pas de taille fixe, si on ajoute des valeurs dedans, il grandit et si on en enl√®ve il r√©tr√©cit.

//! ATTENTION : En JS, on peut mettre N'IMPORTE QUOI dans un tableau, ce qui peut poser des soucis par la suite car souvent on fait faire les m√™mes choses √† tous les √©l√©ments d'un tableau, DONC faire des tableau avec les m√™mes types de donn√©es dedans.
let bazar = ['Soup <3 ', 42, true];
console.log('bazar');// gros bordel mais c'est permis.
// MAIS : 
for (let truc of bazar) {
    console.log(truc);
}; // TODO aucune id√©e de ce que truc est

//for(let truc of bazar) {
//   console.log(truc.toUpperCase())}; 
// Ici, on a fait planter la console apr√®s 'Soup', car on a demand√© de mettre des nombres, des dates et des bool√©ens en majuscule, ce qui est impossible.

//! Pour d√©clarer un tableau : 
// On a cr√©√© un tableau qui s'abbelle hobbies (= nom de la variable), dans lequel on a mis :
// - dans la premi√®re case : 'P√©tanque'
// - dans la deuxi√®me : 'Ricard'
// - dans la troisi√®me : 'Poulet-compote'
let hobbies = ['P√©tanque', 'Ricard', 'Poulet-compote']

// Chaque valeur/case stock√©e dans le tableau poss√®de un indice (ou index), qui permet de le retrouver dans le tableaux.
// Cet index commence toujours √† 0 (sauf en winDev -_-)
// => L'index max vaudra toujours la taille de notre tableau -1.
// Ex : Si taille tableau = 3, alors l'index max = 3-1 = 2. (oui c'est horrible).
//* => Si je veux afficher la valeur de la 2e case, qui porte l'index 1 :
console.log(hobbies);
console.table(hobbies); // = affichage + structur√©

// Si on essaie d'afficher le tableau entier dans la page, comme le navigateur est incap d'afficher un objet dans la page, il fait un toString() sur le tableau.
// => Il concat√®ne toutes les valeurs du tableau et les s√©pare par des virgules :
document.getElementById('affichage1').textContent = 'hobbies';

//* DONC Si je veux afficher la valeur de la 2e case : elle porte l'index 1 :
console.log(hobbies[1]); // Ricard
console.log(hobbies[6]); // undefined, car pas de valeur √† l'index 6

//! Acc√©der √† la taille d'un tableau :
console.log(hobbies.length); // Affiche le nbr d'√©l√©ments dans le tableau hobbies, ici 3.

//! Afficher un nouvel √©l√©ment dans un tableau :
//? Version nulle et peu secure: 
// On ajoute √† l'index 3, qui n'a pas encore de valeur :
hobbies [3] = 'Zumba';
console.log(hobbies); // Affiche bien Zumba en index 3

// Probl√®me :
// hobbies [11] = 'Moussaka';
// console.log(hobbies);
// Fonctionne, mais :
// - va laisser pleins de cases vides entre l'index 3 et l'index 11 => consomme de la m√©moire pour rien.
// - si on veut p.ex. afficher des cases vides en majuscules => plantage de la page car on veut afficher des undefined.
// - risque d'√©crasement si on ajoute une valeur dans une case d√©j√† occup√©e.

//? Version cool, celle qu'il faut faire :
// M√©thode qui permet d'ajouter un √©l√©ment √† la FIN d'un tableau existant :
hobbies.push('Tuning');
console.log(hobbies); // Youpi l'√©l√©ment s'est mis √† la fin du tableau.

// M√©thode qui permet d'ajouter au DEBUT du tableau (moins utilis√©e) :
hobbies.unshift('Pistaches');
console.log(hobbies); // L

//! Supprimer une valeur dans un tableau :
console.clear();

// d√©clarer un tableau vide : 
const technos = [];

// ajouter √† un tableau :
technos.push('CSS');
technos.push('Javascript');

technos.unshift('HTML');

// consulter une case :
console.log(technos[0]);

// afficher tout le tableau :
console.log(technos);
// console.table(technos);

//? Supprimer :
//* technos.pop(); = supprime toujours le dernier √©l√©ment
// console.log(technos);
//* technos.shift(); = supprime toujours le prmeier √©l√©ment
// console.log(technos);

// MAIS c'est rare de supprimer un √©l√©ment au d√©but ou √† la fin d'un tableau, on supprime plut√¥t des √©l√©ments pr√©cis :

//! Supprimer un √©lement cibl√© avec tableau.splice(indexDepart, nbElementASupprimer) :
// nbElementASupprimer = optionnel, mais si on ne le met pas => supprime tout jusqu'√† la fin :
// technos.splice (1); = supprime tout √† partir de CSS jusqu'√† la fin

// DONC on pr√©f√®re :
technos.splice(1, 1); // = supprime juste CSS qui se trouve √† l'indice 1
console.log(technos);

//? NOTE : M√©thode filter = bcp utilis√©e pour supprimer (n√©cessaire en React) :
// technos = technos.filter( (t) => t!== 'CSS'); 
// console.log(technos);
//   Mais on verra √ßa dans des tableaux plus avanc√©s.

//! Quelques m√©thodes utiles :

const DIV_AFF_2 = document.getElementById('affichage2');

//? Afficher les √©l√©ments d'un tableau dans la page :
//DIV_AFF_2.textContent = technos;
// tableau.toString() -> Transforme un tableau en string en concat√©nant tous les √©l√©ments du tableau  et en les s√©parant par une virgule.
// DIV_AFF_2.textContent = technos.toString;    -> C'ets moche
//* join = permet de faire un toString mais on a le choix du s√©parateur :
// DIV_AFF_2.textContent = technos.join(' | ');
// -> Va s√©parer les √©l√©ments par un | (vachement plus sexy)
DIV_AFF_2.textContent = technos.join(' - ');
// -> vachement plus mignon


//? inverser un tableau :
console.clear();

const motsRigolos = ['Bouille', 'Fouille', 'Nouille', 'Touille', 'Douille'];

console.log(motsRigolos);
motsRigolos.reverse; // * inverse le sens du tableau 
console.log(motsRigolos);


//? Trier un tableau :
console.clear();

const notes = [12, 8, 26, 1, 127];
notes.sort();
console.log(notes); // Le tri se fait, mais sur le POIDS des caract√®res ascii, pas sur les nombres oskouuuuuur

// DONC besoin de FONCTIONS DE COMPARAISON :

//* par ordre croissant :
notes.sort((a, b) => a - b); // Va chaque fois calculer le coefficient entre un nombre et le suivant, et va classer ces coefficients du plus PETIT au plus GRAND.
console.log(notes); 

//* par ordre d√©croissant :
notes.sort((a, b) => b - a ); // Va chaque fois calculer le coefficient entre un nombre et le //TODO ?pr√©c√©dent ou rien √† voir?,
// et va classer ces coefficients du plus GRAND au plus PETIT.
// a et b : on √©crit ce qu'on veut √† la place, c'est l'ordre du calcul qui compte
console.log(notes); 

// Avant d'avoir une fonction sort, on devait cr√©er un tableau temporaire o√π on mettait chaque coeff et on les d√©pla√ßait √† chaque nouveau coeff ajout√©, merci les dev d'avoir cr√©√© sort <3

//* Et dans un tableau de strings ? ü©≤
const gateaux = ['√©clair', 'merveilleux', 'paris-brest', 'tarte-tatin', 'couign-aman'];
console.log(gateaux);

// gateaux.sort((a, b) => a - b);  => Ne fonctionne pas car c'est une op√©ration math√©matique, or ici on compare des ü©≤ ! 
// DONC :
//* par ordre alphab√©tique :
gateaux.sort((chaine1, chaine2) => chaine1.localeCompare(chaine2));
// = compare une string √† la suivante selon les lettres et non les nombres. //TODO j'ai pas tout capt√©, les lettres ont des POIDS ???
// chaine1 et chaine 2 : on √©crit ce qu'on veut √† la place, c'est l'ordre du compare qui compte.
console.log(gateaux);

//* par ordre anti-alphab√©tique :
gateaux.sort((chaine1, chaine2) => chaine2.localeCompare(chaine1));
// = compare une string √† la pr√©c√©dente selon les lettres et non les nombres.

//* pr√©nomsDeDroite : Aristide, Evariste, Pierre-Emmanuel, Olympe, Berthole, Val√®re, Marie-Cl√©mence, Ath√©na√Øs.





